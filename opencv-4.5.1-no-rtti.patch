diff -Nuarp opencv-4.5.1/modules/core/include/opencv2/core/bindings_utils.hpp opencv-4.5.1.nortti/modules/core/include/opencv2/core/bindings_utils.hpp
--- opencv-4.5.1/modules/core/include/opencv2/core/bindings_utils.hpp	2020-12-21 12:01:38.000000000 +0800
+++ opencv-4.5.1.nortti/modules/core/include/opencv2/core/bindings_utils.hpp	2021-01-08 21:34:08.012830180 +0800
@@ -76,14 +76,6 @@ CV_WRAP static inline
 AsyncArray testAsyncException()
 {
     AsyncPromise p;
-    try
-    {
-        CV_Error(Error::StsOk, "Test: Generated async error");
-    }
-    catch (const cv::Exception& e)
-    {
-        p.setException(e);
-    }
     return p.getArrayResult();
 }
 
diff -Nuarp opencv-4.5.1/modules/core/src/async.cpp opencv-4.5.1.nortti/modules/core/src/async.cpp
--- opencv-4.5.1/modules/core/src/async.cpp	2020-12-21 12:01:38.000000000 +0800
+++ opencv-4.5.1.nortti/modules/core/src/async.cpp	2021-01-08 21:34:45.847117093 +0800
@@ -118,7 +118,6 @@ struct AsyncArray::Impl
             if (has_exception)
             {
                 result_is_fetched = true;
-                throw cv_exception;
             }
             CV_Error(Error::StsInternal, "AsyncArray: invalid state of 'has_result = true'");
         }
diff -Nuarp opencv-4.5.1/modules/core/src/bindings_utils.cpp opencv-4.5.1.nortti/modules/core/src/bindings_utils.cpp
--- opencv-4.5.1/modules/core/src/bindings_utils.cpp	2020-12-21 12:01:38.000000000 +0800
+++ opencv-4.5.1.nortti/modules/core/src/bindings_utils.cpp	2021-01-08 21:36:12.481499049 +0800
@@ -14,7 +14,7 @@ String dumpInputArray(InputArray argumen
         return "InputArray: noArray()";
     std::ostringstream ss;
     ss << "InputArray:";
-    try {
+    {
         do {
             ss << (argument.empty() ? " empty()=true" : " empty()=false");
             ss << cv::format(" kind=0x%08llx", (long long int)argument.kind());
@@ -48,10 +48,6 @@ String dumpInputArray(InputArray argumen
             ss << " type(-1)=" << cv::typeToString(argument.type(-1));
         } while (0);
     }
-    catch (...)
-    {
-        ss << " ERROR: exception occurred, dump is non-complete";  // need to properly support different kinds
-    }
     return ss.str();
 }
 
@@ -61,7 +57,7 @@ CV_EXPORTS_W String dumpInputArrayOfArra
         return "InputArrayOfArrays: noArray()";
     std::ostringstream ss;
     ss << "InputArrayOfArrays:";
-    try {
+    {
         do {
             ss << (argument.empty() ? " empty()=true" : " empty()=false");
             ss << cv::format(" kind=0x%08llx", (long long int)argument.kind());
@@ -101,10 +97,6 @@ CV_EXPORTS_W String dumpInputArrayOfArra
             }
         } while (0);
     }
-    catch (...)
-    {
-        ss << " ERROR: exception occurred, dump is non-complete";  // need to properly support different kinds
-    }
     return ss.str();
 }
 
@@ -114,7 +106,7 @@ CV_EXPORTS_W String dumpInputOutputArray
         return "InputOutputArray: noArray()";
     std::ostringstream ss;
     ss << "InputOutputArray:";
-    try {
+    {
         do {
             ss << (argument.empty() ? " empty()=true" : " empty()=false");
             ss << cv::format(" kind=0x%08llx", (long long int)argument.kind());
@@ -148,10 +140,6 @@ CV_EXPORTS_W String dumpInputOutputArray
             ss << " type(-1)=" << cv::typeToString(argument.type(-1));
         } while (0);
     }
-    catch (...)
-    {
-        ss << " ERROR: exception occurred, dump is non-complete";  // need to properly support different kinds
-    }
     return ss.str();
 }
 
@@ -161,7 +149,7 @@ CV_EXPORTS_W String dumpInputOutputArray
         return "InputOutputArrayOfArrays: noArray()";
     std::ostringstream ss;
     ss << "InputOutputArrayOfArrays:";
-    try {
+    {
         do {
             ss << (argument.empty() ? " empty()=true" : " empty()=false");
             ss << cv::format(" kind=0x%08llx", (long long int)argument.kind());
@@ -201,10 +189,6 @@ CV_EXPORTS_W String dumpInputOutputArray
             }
         } while (0);
     }
-    catch (...)
-    {
-        ss << " ERROR: exception occurred, dump is non-complete";  // need to properly support different kinds
-    }
     return ss.str();
 }
 
diff -Nuarp opencv-4.5.1/modules/core/src/command_line_parser.cpp opencv-4.5.1.nortti/modules/core/src/command_line_parser.cpp
--- opencv-4.5.1/modules/core/src/command_line_parser.cpp	2020-12-21 12:01:38.000000000 +0800
+++ opencv-4.5.1.nortti/modules/core/src/command_line_parser.cpp	2021-01-08 21:39:58.903428101 +0800
@@ -119,7 +119,6 @@ static void from_str(const String& str,
 
 void CommandLineParser::getByName(const String& name, bool space_delete, Param type, void* dst) const
 {
-    try
     {
         for (size_t i = 0; i < impl->data.size(); i++)
         {
@@ -144,12 +143,6 @@ void CommandLineParser::getByName(const
             }
         }
     }
-    catch (const Exception& e)
-    {
-        impl->error = true;
-        impl->error_message = impl->error_message + "Parameter '"+ name + "': " + e.err + "\n";
-        return;
-    }
 
     CV_Error_(Error::StsBadArg, ("undeclared key '%s' requested", name.c_str()));
 }
@@ -157,7 +150,6 @@ void CommandLineParser::getByName(const
 
 void CommandLineParser::getByIndex(int index, bool space_delete, Param type, void* dst) const
 {
-    try
     {
         for (size_t i = 0; i < impl->data.size(); i++)
         {
@@ -177,12 +169,6 @@ void CommandLineParser::getByIndex(int i
             }
         }
     }
-    catch (const Exception& e)
-    {
-        impl->error = true;
-        impl->error_message = impl->error_message + format("Parameter #%d: ", index) + e.err + "\n";
-        return;
-    }
 
     CV_Error_(Error::StsBadArg, ("undeclared position %d requested", index));
 }
@@ -464,16 +450,7 @@ std::vector<String> CommandLineParser::I
         {
             if (begin == true)
             {
-                throw cv::Exception(CV_StsParseError,
-                         String("error in split_range_string(")
-                         + str
-                         + String(", ")
-                         + String(1, fs)
-                         + String(", ")
-                         + String(1, ss)
-                         + String(")"),
-                         "", __FILE__, __LINE__
-                         );
+                return vec;
             }
             begin = true;
             word = "";
@@ -484,16 +461,7 @@ std::vector<String> CommandLineParser::I
         {
             if (begin == false)
             {
-                throw cv::Exception(CV_StsParseError,
-                         String("error in split_range_string(")
-                         + str
-                         + String(", ")
-                         + String(1, fs)
-                         + String(", ")
-                         + String(1, ss)
-                         + String(")"),
-                         "", __FILE__, __LINE__
-                         );
+                return vec;
             }
             begin = false;
             vec.push_back(word);
@@ -508,16 +476,7 @@ std::vector<String> CommandLineParser::I
 
     if (begin == true)
     {
-        throw cv::Exception(CV_StsParseError,
-                 String("error in split_range_string(")
-                 + str
-                 + String(", ")
-                 + String(1, fs)
-                 + String(", ")
-                 + String(1, ss)
-                 + String(")"),
-                 "", __FILE__, __LINE__
-                );
+        return vec;
     }
 
     return vec;
diff -Nuarp opencv-4.5.1/modules/core/src/glob.cpp opencv-4.5.1.nortti/modules/core/src/glob.cpp
--- opencv-4.5.1/modules/core/src/glob.cpp	2020-12-21 12:01:38.000000000 +0800
+++ opencv-4.5.1.nortti/modules/core/src/glob.cpp	2021-01-08 21:35:24.928380538 +0800
@@ -231,7 +231,6 @@ static void glob_rec(const cv::String& d
     if ((dir = opendir (directory.c_str())) != 0)
     {
         /* find all the files and directories within directory */
-        try
         {
             struct dirent *ent;
             while ((ent = readdir (dir)) != 0)
@@ -255,11 +254,6 @@ static void glob_rec(const cv::String& d
                     result.push_back(entry);
             }
         }
-        catch (...)
-        {
-            closedir(dir);
-            throw;
-        }
         closedir(dir);
     }
     else
diff -Nuarp opencv-4.5.1/modules/core/src/matrix.cpp opencv-4.5.1.nortti/modules/core/src/matrix.cpp
--- opencv-4.5.1/modules/core/src/matrix.cpp	2020-12-21 12:01:38.000000000 +0800
+++ opencv-4.5.1.nortti/modules/core/src/matrix.cpp	2021-01-08 21:37:12.735415692 +0800
@@ -700,18 +700,10 @@ void Mat::create(int d, const int* _size
 #endif
         if(!a)
             a = a0;
-        try
         {
             u = a->allocate(dims, size, _type, 0, step.p, ACCESS_RW /* ignored */, USAGE_DEFAULT);
             CV_Assert(u != 0);
         }
-        catch (...)
-        {
-            if (a == a0)
-                throw;
-            u = a0->allocate(dims, size, _type, 0, step.p, ACCESS_RW /* ignored */, USAGE_DEFAULT);
-            CV_Assert(u != 0);
-        }
         CV_Assert( step[dims-1] == (size_t)CV_ELEM_SIZE(flags) );
     }
 
@@ -761,7 +753,6 @@ Mat::Mat(const Mat& m, const Range& _row
     }
 
     *this = m;
-    try
     {
         if( _rowRange != Range::all() && _rowRange != Range(0,rows) )
         {
@@ -781,11 +772,6 @@ Mat::Mat(const Mat& m, const Range& _row
             flags |= SUBMATRIX_FLAG;
         }
     }
-    catch(...)
-    {
-        release();
-        throw;
-    }
 
     updateContinuityFlag();
 
diff -Nuarp opencv-4.5.1/modules/core/src/parallel.cpp opencv-4.5.1.nortti/modules/core/src/parallel.cpp
--- opencv-4.5.1/modules/core/src/parallel.cpp	2020-12-21 12:01:38.000000000 +0800
+++ opencv-4.5.1.nortti/modules/core/src/parallel.cpp	2021-01-08 21:41:52.984376964 +0800
@@ -332,29 +332,9 @@ namespace {
             CV_TRACE_ARG_VALUE(range_end, "range.end", (int64)r.end);
 #endif
 
-            try
             {
                 (*ctx.body)(r);
             }
-#if CV__EXCEPTION_PTR
-            catch (...)
-            {
-                ctx.recordException();
-            }
-#else
-            catch (const cv::Exception& e)
-            {
-                ctx.recordException(e.what());
-            }
-            catch (const std::exception& e)
-            {
-                ctx.recordException(e.what());
-            }
-            catch (...)
-            {
-                ctx.recordException("Unknown exception");
-            }
-#endif
 
             if (!ctx.is_rng_used && !(cv::theRNG() == ctx.rng))
                 ctx.is_rng_used = true;
@@ -507,16 +487,10 @@ void parallel_for_(const cv::Range& rang
       isNotNestedRegion = !flagNestedParallelFor.exchange(true);
     if (isNotNestedRegion)
     {
-        try
         {
             parallel_for_impl(range, body, nstripes);
             flagNestedParallelFor = false;
         }
-        catch (...)
-        {
-            flagNestedParallelFor = false;
-            throw;
-        }
     }
     else // nested parallel_for_() calls are not parallelized
 #endif // CV_PARALLEL_FRAMEWORK
diff -Nuarp opencv-4.5.1/modules/core/src/persistence.cpp opencv-4.5.1.nortti/modules/core/src/persistence.cpp
--- opencv-4.5.1/modules/core/src/persistence.cpp	2020-12-21 12:01:38.000000000 +0800
+++ opencv-4.5.1.nortti/modules/core/src/persistence.cpp	2021-01-08 21:41:32.875738497 +0800
@@ -722,7 +722,6 @@ public:
             strbufpos = bufOffset;
             bufofs = 0;
 
-            try
             {
                 char* ptr = bufferStart();
                 ptr[0] = ptr[1] = ptr[2] = '\0';
@@ -760,12 +759,6 @@ public:
                     }
                 }
             }
-            catch(...)
-            {
-                is_opened = true;
-                release();
-                throw;
-            }
 
             // release resources that we do not need anymore
             closeFile();
@@ -1823,18 +1816,12 @@ FileStorage::~FileStorage()
 
 bool FileStorage::open(const String& filename, int flags, const String& encoding)
 {
-    try
     {
         bool ok = p->open(filename.c_str(), flags, encoding.c_str());
         if(ok)
             state = FileStorage::NAME_EXPECTED + FileStorage::INSIDE_MAP;
         return ok;
     }
-    catch (...)
-    {
-        release();
-        throw;  // re-throw
-    }
 }
 
 bool FileStorage::isOpened() const { return p->is_opened; }
diff -Nuarp opencv-4.5.1/modules/core/src/system.cpp opencv-4.5.1.nortti/modules/core/src/system.cpp
--- opencv-4.5.1/modules/core/src/system.cpp	2020-12-21 12:01:38.000000000 +0800
+++ opencv-4.5.1.nortti/modules/core/src/system.cpp	2021-01-08 21:39:08.288338136 +0800
@@ -1133,7 +1133,6 @@ void error( const Exception& exc )
         *p = 0;
     }
 
-    throw exc;
 #ifdef __GNUC__
 # if !defined __clang__ && !defined __APPLE__
     // this suppresses this warning: "noreturn" function does return [enabled by default]
@@ -1885,7 +1884,7 @@ inline bool parseOption(const std::strin
     {
         return false;
     }
-    throw ParseError(value);
+    return false;
 }
 
 template<>
@@ -1906,7 +1905,7 @@ inline size_t parseOption(const std::str
         return v * 1024 * 1024;
     else if (suffixStr == "KB" || suffixStr == "Kb" || suffixStr == "kb")
         return v * 1024;
-    throw ParseError(value);
+    return v;
 }
 
 template<>
@@ -1949,16 +1948,11 @@ static inline const char * envRead(const
 template<typename T>
 inline T read(const std::string & k, const T & defaultValue)
 {
-    try
     {
         const char * res = envRead(k.c_str());
         if (res)
             return parseOption<T>(std::string(res));
     }
-    catch (const ParseError &err)
-    {
-        CV_Error(cv::Error::StsBadArg, err.toString(k));
-    }
     return defaultValue;
 }
 
diff -Nuarp opencv-4.5.1/modules/core/src/umatrix.cpp opencv-4.5.1.nortti/modules/core/src/umatrix.cpp
--- opencv-4.5.1/modules/core/src/umatrix.cpp	2020-12-21 12:01:38.000000000 +0800
+++ opencv-4.5.1.nortti/modules/core/src/umatrix.cpp	2021-01-08 21:40:27.170919849 +0800
@@ -575,14 +575,9 @@ UMat Mat::getUMat(AccessFlag accessFlags
         new_u->originalUMatData = u;
     }
     bool allocated = false;
-    try
     {
         allocated = UMat::getStdAllocator()->allocate(new_u, accessFlags, usageFlags);
     }
-    catch (const cv::Exception& e)
-    {
-        fprintf(stderr, "Exception: %s\n", e.what());
-    }
     if (!allocated)
     {
         allocated = getDefaultAllocator()->allocate(new_u, accessFlags, usageFlags);
@@ -650,17 +645,10 @@ void UMat::create(int d, const int* _siz
             a = a0;
             a0 = Mat::getDefaultAllocator();
         }
-        try
         {
             u = a->allocate(dims, size, _type, 0, step.p, ACCESS_RW /* ignored */, usageFlags);
             CV_Assert(u != 0);
         }
-        catch(...)
-        {
-            if(a != a0)
-                u = a0->allocate(dims, size, _type, 0, step.p, ACCESS_RW /* ignored */, usageFlags);
-            CV_Assert(u != 0);
-        }
         CV_Assert( step[dims-1] == (size_t)CV_ELEM_SIZE(flags) );
     }
 
diff -Nuarp opencv-4.5.1/modules/core/src/utils/filesystem.cpp opencv-4.5.1.nortti/modules/core/src/utils/filesystem.cpp
--- opencv-4.5.1/modules/core/src/utils/filesystem.cpp	2020-12-21 12:01:38.000000000 +0800
+++ opencv-4.5.1.nortti/modules/core/src/utils/filesystem.cpp	2021-01-08 21:40:57.625372292 +0800
@@ -508,14 +508,9 @@ cv::String getCacheDirectory(const char*
                     && !utils::fs::isDirectory(default_cache_path))
                 {
                     std::vector<cv::String> existedCacheDirs;
-                    try
                     {
                         utils::fs::glob_relative(default_cache_path_base, "*", existedCacheDirs, false, true);
                     }
-                    catch (...)
-                    {
-                        // ignore
-                    }
                     if (!existedCacheDirs.empty())
                     {
                         CV_LOG_WARNING(NULL, "Creating new OpenCV cache directory: " << default_cache_path);
diff -Nuarp opencv-4.5.1/modules/imgproc/src/contours.cpp opencv-4.5.1.nortti/modules/imgproc/src/contours.cpp
--- opencv-4.5.1/modules/imgproc/src/contours.cpp	2020-12-21 12:01:38.000000000 +0800
+++ opencv-4.5.1.nortti/modules/imgproc/src/contours.cpp	2021-01-08 21:49:14.717434789 +0800
@@ -1736,7 +1736,6 @@ cvFindContours_Impl( void*  img,  CvMemS
     }
     else
     {
-        try
         {
             scanner = cvStartFindContours_Impl( img, storage, cntHeaderSize, mode, method, offset,
                                             needFillBorder);
@@ -1748,12 +1747,6 @@ cvFindContours_Impl( void*  img,  CvMemS
             }
             while( contour != 0 );
         }
-        catch(...)
-        {
-            if( scanner )
-                cvEndFindContours(&scanner);
-            throw;
-        }
 
         *firstContour = cvEndFindContours( &scanner );
     }
diff -Nuarp opencv-4.5.1/modules/video/src/tracking/detail/tracking_feature.cpp opencv-4.5.1.nortti/modules/video/src/tracking/detail/tracking_feature.cpp
--- opencv-4.5.1/modules/video/src/tracking/detail/tracking_feature.cpp	2020-12-21 12:01:38.000000000 +0800
+++ opencv-4.5.1.nortti/modules/video/src/tracking/detail/tracking_feature.cpp	2021-01-08 21:50:14.792354689 +0800
@@ -107,15 +107,9 @@ void CvHaarEvaluator::generateFeatures(i
 
 CvHaarEvaluator::FeatureHaar::FeatureHaar(Size patchSize)
 {
-    try
     {
         generateRandomFeature(patchSize);
     }
-    catch (...)
-    {
-        // FIXIT
-        throw;
-    }
 }
 
 void CvHaarEvaluator::FeatureHaar::generateRandomFeature(Size patchSize)
