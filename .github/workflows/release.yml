name: release
on: [push, pull_request]

env:
  DEVELOPER_DIR: /Applications/Xcode_12.2.app/Contents/Developer

jobs:
  android-opencv4:
    runs-on: ubuntu-latest
    env:
      OPENCV_VERSION: 4.5.1
      PACKAGENAME: opencv-mobile-4.5.1-android
    steps:
    - uses: actions/checkout@v2
    - name: ndk-fix-debug
      run: sed -i -e '/^  -g$/d' $ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        rm -rf modules/gapi
        patch -p1 -i ../opencv-4.5.1-no-rtti.patch
    - name: build-armeabi-v7a
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-armeabi-v7a && cd build-armeabi-v7a
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI="armeabi-v7a" -DANDROID_ARM_NEON=ON -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-arm64-v8a
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64-v8a && cd build-arm64-v8a
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI="arm64-v8a" -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-x86
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86 && cd build-x86
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI="x86" -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-x86_64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI="x86_64" -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-x86/install/sdk/native/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/sdk/native/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-armeabi-v7a/install/sdk/native/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-arm64-v8a/install/sdk/native/* ${{ env.PACKAGENAME }}/
        rm -f ${{ env.PACKAGENAME }}/jni/*.mk
        rm -f ${{ env.PACKAGENAME }}/jni/android.toolchain.cmake
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  android-opencv3:
    runs-on: ubuntu-latest
    env:
      OPENCV_VERSION: 3.4.13
      PACKAGENAME: opencv-mobile-3.4.13-android
    steps:
    - uses: actions/checkout@v2
    - name: ndk-fix-debug
      run: sed -i -e '/^  -g$/d' $ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        patch -p1 -i ../opencv-3.4.13-no-rtti.patch
    - name: build-armeabi-v7a
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-armeabi-v7a && cd build-armeabi-v7a
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI="armeabi-v7a" -DANDROID_ARM_NEON=ON -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-arm64-v8a
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64-v8a && cd build-arm64-v8a
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI="arm64-v8a" -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-x86
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86 && cd build-x86
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI="x86" -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-x86_64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI="x86_64" -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-x86/install/sdk/native/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/sdk/native/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-armeabi-v7a/install/sdk/native/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-arm64-v8a/install/sdk/native/* ${{ env.PACKAGENAME }}/
        rm -f ${{ env.PACKAGENAME }}/jni/*.mk
        rm -f ${{ env.PACKAGENAME }}/jni/android.toolchain.cmake
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  android-opencv2:
    runs-on: ubuntu-latest
    env:
      OPENCV_VERSION: 2.4.13.7
      PACKAGENAME: opencv-mobile-2.4.13.7-android
    steps:
    - uses: actions/checkout@v2
    - name: ndk-fix-debug
      run: sed -i -e '/^  -g$/d' $ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        patch -p1 -i ../opencv-2.4.13.7-no-rtti.patch
    - name: build-armeabi-v7a
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-armeabi-v7a && cd build-armeabi-v7a
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI="armeabi-v7a" -DANDROID_ARM_NEON=ON -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-arm64-v8a
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64-v8a && cd build-arm64-v8a
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI="arm64-v8a" -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-x86
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86 && cd build-x86
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI="x86" -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-x86_64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI="x86_64" -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-x86/install/sdk/native/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/sdk/native/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-armeabi-v7a/install/sdk/native/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-arm64-v8a/install/sdk/native/* ${{ env.PACKAGENAME }}/
        rm -f ${{ env.PACKAGENAME }}/jni/*.mk
        rm -f ${{ env.PACKAGENAME }}/jni/android.toolchain.cmake
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ios-opencv4:
    runs-on: macos-latest
    env:
      OPENCV_VERSION: 4.5.1
      PACKAGENAME: opencv-mobile-4.5.1-ios
    steps:
    - uses: actions/checkout@v2
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        rm -rf modules/gapi
        patch -p1 -i ../opencv-4.5.1-no-rtti.patch
    - name: build-ios
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-ios && cd build-ios
        cmake -DCMAKE_TOOLCHAIN_FILE=../../ios.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DIOS_PLATFORM=OS -DENABLE_BITCODE=0 -DENABLE_ARC=0 -DENABLE_VISIBILITY=0 -DIOS_ARCH="armv7;arm64;arm64e" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-simulator
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-simulator && cd build-simulator
        cmake -DCMAKE_TOOLCHAIN_FILE=../../ios.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DIOS_PLATFORM=SIMULATOR -DENABLE_BITCODE=0 -DENABLE_ARC=0 -DENABLE_VISIBILITY=0 -DIOS_ARCH="i386;x86_64" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Versions/A/Headers
        mkdir -p opencv2.framework/Versions/A/Resources
        ln -s A opencv2.framework/Versions/Current
        ln -s Versions/Current/Headers opencv2.framework/Headers
        ln -s Versions/Current/Resources opencv2.framework/Resources
        ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        lipo -create build-ios/install/lib/lib*.a build-simulator/install/lib/lib*.a -o opencv2.framework/Versions/A/opencv2
        cp -r build-ios/install/include/* opencv2.framework/Versions/A/Headers/
        sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    - name: upload-zip
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ios-opencv3:
    runs-on: macos-latest
    env:
      OPENCV_VERSION: 3.4.13
      PACKAGENAME: opencv-mobile-3.4.13-ios
    steps:
    - uses: actions/checkout@v2
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        patch -p1 -i ../opencv-3.4.13-no-rtti.patch
    - name: build-ios
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-ios && cd build-ios
        cmake -DCMAKE_TOOLCHAIN_FILE=../../ios.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DIOS_PLATFORM=OS -DENABLE_BITCODE=0 -DENABLE_ARC=0 -DENABLE_VISIBILITY=0 -DIOS_ARCH="armv7;arm64;arm64e" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-simulator
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-simulator && cd build-simulator
        cmake -DCMAKE_TOOLCHAIN_FILE=../../ios.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DIOS_PLATFORM=SIMULATOR -DENABLE_BITCODE=0 -DENABLE_ARC=0 -DENABLE_VISIBILITY=0 -DIOS_ARCH="i386;x86_64" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Versions/A/Headers
        mkdir -p opencv2.framework/Versions/A/Resources
        ln -s A opencv2.framework/Versions/Current
        ln -s Versions/Current/Headers opencv2.framework/Headers
        ln -s Versions/Current/Resources opencv2.framework/Resources
        ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        lipo -create build-ios/install/lib/lib*.a build-simulator/install/lib/lib*.a -o opencv2.framework/Versions/A/opencv2
        cp -r build-ios/install/include/* opencv2.framework/Versions/A/Headers/
        sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    - name: upload-zip
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ios-opencv2:
    runs-on: macos-latest
    env:
      OPENCV_VERSION: 2.4.13.7
      PACKAGENAME: opencv-mobile-2.4.13.7-ios
    steps:
    - uses: actions/checkout@v2
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        patch -p1 -i ../opencv-2.4.13.7-no-rtti.patch
    - name: build-ios
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-ios && cd build-ios
        cmake -DCMAKE_TOOLCHAIN_FILE=../../ios.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DIOS_PLATFORM=OS -DENABLE_BITCODE=0 -DENABLE_ARC=0 -DENABLE_VISIBILITY=0 -DIOS_ARCH="armv7;arm64;arm64e" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-simulator
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-simulator && cd build-simulator
        cmake -DCMAKE_TOOLCHAIN_FILE=../../ios.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DIOS_PLATFORM=SIMULATOR -DENABLE_BITCODE=0 -DENABLE_ARC=0 -DENABLE_VISIBILITY=0 -DIOS_ARCH="i386;x86_64" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Versions/A/Headers
        mkdir -p opencv2.framework/Versions/A/Resources
        ln -s A opencv2.framework/Versions/Current
        ln -s Versions/Current/Headers opencv2.framework/Headers
        ln -s Versions/Current/Resources opencv2.framework/Resources
        ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        lipo -create build-ios/install/lib/lib*.a build-simulator/install/lib/lib*.a -o opencv2.framework/Versions/A/opencv2
        cp -r build-ios/install/include/* opencv2.framework/Versions/A/Headers/
        sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    - name: upload-zip
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ios-opencv4-bitcode:
    runs-on: macos-latest
    env:
      OPENCV_VERSION: 4.5.1
      PACKAGENAME: opencv-mobile-4.5.1-ios-bitcode
    steps:
    - uses: actions/checkout@v2
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        rm -rf modules/gapi
        patch -p1 -i ../opencv-4.5.1-no-rtti.patch
    - name: build-ios
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-ios && cd build-ios
        cmake -DCMAKE_TOOLCHAIN_FILE=../../ios.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DIOS_PLATFORM=OS -DENABLE_BITCODE=1 -DENABLE_ARC=0 -DENABLE_VISIBILITY=0 -DIOS_ARCH="armv7;arm64;arm64e" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-simulator
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-simulator && cd build-simulator
        cmake -DCMAKE_TOOLCHAIN_FILE=../../ios.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DIOS_PLATFORM=SIMULATOR -DENABLE_BITCODE=1 -DENABLE_ARC=0 -DENABLE_VISIBILITY=0 -DIOS_ARCH="i386;x86_64" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Versions/A/Headers
        mkdir -p opencv2.framework/Versions/A/Resources
        ln -s A opencv2.framework/Versions/Current
        ln -s Versions/Current/Headers opencv2.framework/Headers
        ln -s Versions/Current/Resources opencv2.framework/Resources
        ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        lipo -create build-ios/install/lib/lib*.a build-simulator/install/lib/lib*.a -o opencv2.framework/Versions/A/opencv2
        cp -r build-ios/install/include/* opencv2.framework/Versions/A/Headers/
        sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    - name: upload-zip
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ios-opencv3-bitcode:
    runs-on: macos-latest
    env:
      OPENCV_VERSION: 3.4.13
      PACKAGENAME: opencv-mobile-3.4.13-ios-bitcode
    steps:
    - uses: actions/checkout@v2
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        patch -p1 -i ../opencv-3.4.13-no-rtti.patch
    - name: build-ios
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-ios && cd build-ios
        cmake -DCMAKE_TOOLCHAIN_FILE=../../ios.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DIOS_PLATFORM=OS -DENABLE_BITCODE=1 -DENABLE_ARC=0 -DENABLE_VISIBILITY=0 -DIOS_ARCH="armv7;arm64;arm64e" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-simulator
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-simulator && cd build-simulator
        cmake -DCMAKE_TOOLCHAIN_FILE=../../ios.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DIOS_PLATFORM=SIMULATOR -DENABLE_BITCODE=1 -DENABLE_ARC=0 -DENABLE_VISIBILITY=0 -DIOS_ARCH="i386;x86_64" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv3_cmake_options.txt` ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Versions/A/Headers
        mkdir -p opencv2.framework/Versions/A/Resources
        ln -s A opencv2.framework/Versions/Current
        ln -s Versions/Current/Headers opencv2.framework/Headers
        ln -s Versions/Current/Resources opencv2.framework/Resources
        ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        lipo -create build-ios/install/lib/lib*.a build-simulator/install/lib/lib*.a -o opencv2.framework/Versions/A/opencv2
        cp -r build-ios/install/include/* opencv2.framework/Versions/A/Headers/
        sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    - name: upload-zip
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ios-opencv2-bitcode:
    runs-on: macos-latest
    env:
      OPENCV_VERSION: 2.4.13.7
      PACKAGENAME: opencv-mobile-2.4.13.7-ios-bitcode
    steps:
    - uses: actions/checkout@v2
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        patch -p1 -i ../opencv-2.4.13.7-no-rtti.patch
    - name: build-ios
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-ios && cd build-ios
        cmake -DCMAKE_TOOLCHAIN_FILE=../../ios.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DIOS_PLATFORM=OS -DENABLE_BITCODE=1 -DENABLE_ARC=0 -DENABLE_VISIBILITY=0 -DIOS_ARCH="armv7;arm64;arm64e" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-simulator
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-simulator && cd build-simulator
        cmake -DCMAKE_TOOLCHAIN_FILE=../../ios.toolchain.cmake \
            -DCMAKE_C_FLAGS="-fno-rtti -fno-exceptions" -DCMAKE_CXX_FLAGS="-fno-rtti -fno-exceptions" \
            -DIOS_PLATFORM=SIMULATOR -DENABLE_BITCODE=1 -DENABLE_ARC=0 -DENABLE_VISIBILITY=0 -DIOS_ARCH="i386;x86_64" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv2_cmake_options.txt` ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.framework
        mkdir -p opencv2.framework/Versions/A/Headers
        mkdir -p opencv2.framework/Versions/A/Resources
        ln -s A opencv2.framework/Versions/Current
        ln -s Versions/Current/Headers opencv2.framework/Headers
        ln -s Versions/Current/Resources opencv2.framework/Resources
        ln -s Versions/Current/opencv2 opencv2.framework/opencv2
        lipo -create build-ios/install/lib/lib*.a build-simulator/install/lib/lib*.a -o opencv2.framework/Versions/A/opencv2
        cp -r build-ios/install/include/* opencv2.framework/Versions/A/Headers/
        sed -e 's/__NAME__/OpenCV/g' -e 's/__IDENTIFIER__/org.opencv/g' -e 's/__VERSION__/${{ env.OPENCV_VERSION }}/g' Info.plist > opencv2.framework/Versions/A/Resources/Info.plist
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip opencv2.framework
    - name: upload-zip
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip
